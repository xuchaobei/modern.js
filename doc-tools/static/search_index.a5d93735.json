[{"id":0,"title":"Custom Theme","routePath":"/doc-tools/advanced/custom-theme","lang":"en","toc":[],"domain":"","content":"\n\n🚧 Under Construction","frontmatter":{}},{"id":1,"title":"Build Extension","routePath":"/doc-tools/advanced/extend-build","lang":"en","toc":[{"id":"modernjs-builder","text":"Modern.js Builder","depth":2},{"id":"mdx-compilation","text":"MDX Compilation","depth":2}],"domain":"","content":"\n\n\nModern.js Builder\n\nModern.js Doc builds projects based on Modern.js Builder, you can use\nbuilderConfig to customize the build config. For example:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    builderConfig: {\n      dev: {\n        startUrl: false,\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nMDX Compilation\n\nThe compilation of MDX in the framework is based on unified, and you can add\nrelated compilation plugins through markdown configuration. for example :\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      remarkPlugins: [\n        [\n          require('remark-autolink-headings'),\n          {\n            behavior: 'wrap',\n          },\n        ],\n      ],\n      rehypePlugins: [require('rehype-slug')],\n    },\n  },\n  plugins: [docTools()],\n});\n","frontmatter":{}},{"id":2,"title":"Plugin System","routePath":"/doc-tools/advanced/plugin-system","lang":"en","toc":[],"domain":"","content":"\n\n🚧 Under Construction","frontmatter":{}},{"id":3,"title":"Internal Components","routePath":"/doc-tools/api/api-components","lang":"en","toc":[{"id":"nossr","text":"NoSSR","depth":2},{"id":"tabtabs","text":"Tab/Tabs","depth":2}],"domain":"","content":"\n\n\nNoSSR\n\nUsed to skip the ssr for some components.For example\n\n\n\nconst Component = () => {\n  return (\n    <NoSSR>\n      <div>The content here will only be rendered on the client side</div>\n    </NoSSR>\n  );\n};\n\n\n\nTab/Tabs\n\nYou can directly use the Tab/Tabs component in the document to achieve the\neffect of tab switching. for example:\n\n\n\n<Tabs>\n  <Tab label=\"Tab 1\">Tab 1 content</Tab>\n  <Tab label=\"Tab 2\">Tab 2 content</Tab>\n</Tabs>\n\n\nNote\n\nIn order to make it easier for you to use these components, the\n@modern-js/doc-tools/theme package has been aliased inside the framework, so you\ncan directly use @themeto import these components.\n\nThe props type of the Tabs component is as follows:\n\ninterface TabsProps {\n  children: React.ReactNode;\n  defaultValue?: string;\n  groupId?: string;\n}\n\n\ndefaultValue is used to set the tab item selected by default. This value will be\ncompared with the value field of the Tab component props, and if they are equal,\nthe tab will be selected.\n\ngroupId is used to sync the selected tab item between multiple Tabs\ncomponents.The groups with the same groupId will be synchronized.\n\nThe props types of the Tab component are as follows:\n\ninterface TabProps {\n  label: string;\n  // Used to identify the current tab, if not passed, the default label will be used\n  value?: string;\n  children: React.ReactNode;\n}\n\n\nThe value field is used to identify the current tab, if not passed, the default\nlabel will be used.","frontmatter":{}},{"id":4,"title":"Runtime API","routePath":"/doc-tools/api/api-runtime","lang":"en","toc":[{"id":"usepagedata","text":"usePageData","depth":2},{"id":"uselang","text":"useLang","depth":2},{"id":"router-hook","text":"Router Hook","depth":2}],"domain":"","content":"\n\nModern.js Doc exposes some runtime APIs, which is convenient for you to do some\ncustom logic.\n\n\nusePageData\n\nGet the data of the current page, and the return value is an object, which\ncontains all the data of the current page.\n\n\n\nfunction MyComponent() {\n  const pageData = usePageData();\n  return <div>{pageData.title}</div>;\n}\n\n\n\nuseLang\n\nGet the current language, the return value is a string, which is the current\nlanguage.\n\n\n\nfunction MyComponent() {\n  const lang = useLang();\n  // lang === 'zh-CN'\n  return <div>{lang}</div>;\n}\n\n\n\nRouter Hook\n\nThe framework internally uses and re-exports all APIs of react-router-dom, you\ncan use it like this:\n\n\n\nfunction MyComponent() {\n  const location = useLocation();\n  return <div>{location.pathname}</div>;\n}\n","frontmatter":{}},{"id":5,"title":"Basic Config","routePath":"/doc-tools/api/config-basic","lang":"en","toc":[{"id":"base","text":"base","depth":2},{"id":"title","text":"title","depth":2},{"id":"description","text":"description","depth":2},{"id":"icon","text":"icon","depth":2},{"id":"logo","text":"logo","depth":2},{"id":"darkmode","text":"darkMode","depth":2},{"id":"outdir","text":"outDir","depth":2}],"domain":"","content":"\n\n\nbase\n\n * Type: string\n * Default: /\n\nDeployment base path. For example, if you plan to deploy your site to\nhttps://foo.github.io/bar/, then you should set base to \"/bar/\":\n\n\n\nexport default defineConfig({\n  doc: {\n    base: '/bar/',\n  },\n  plugins: [docTools()],\n});\n\n\n\ntitle\n\n * Type: string\n * Default: \"Island\"\n\nSite title. This parameter will be used as the title of the HTML page. For\nexample:\n\n\n\nexport default defineConfig({\n  doc: {\n    title: 'My Site',\n  },\n  plugins: [docTools()],\n});\n\n\n\ndescription\n\n * Type: string\n * Default: \"\"\n\nSite description. This will be used as the description of the HTML page. For\nexample:\n\n\n\nexport default defineConfig({\n  doc: {\n    description: 'My Site Description',\n  },\n  plugins: [docTools()],\n});\n\n\n\nicon\n\n * Type: string\n * Default: \"\"\n\nSite icon. This path will be used as the icon path for the HTML page. For\nexample:\n\n\n\nexport default defineConfig({\n  doc: {\n    icon: '/favicon.ico',\n  },\n  plugins: [docTools()],\n});\n\n\nThe framework will find your icon in the public directory, of course you can\nalso set it to a CDN address.\n\n\nlogo\n\n * Type: string | { dark: string; light: string }\n * Default: \"\"\n\nSite logo. This path will be used as the logo path in the upper left corner of\nthe navbar. For example:\n\n\n\nexport default defineConfig({\n  doc: {\n    logo: '/logo.png',\n  },\n  plugins: [docTools()],\n});\n\n\nThe framework will find your icon in the public directory, you can also set it\nto a CDN address.\n\nOf course you can set different logos for dark/light mode:\n\n\n\nexport default defineConfig({\n  doc: {\n    logo: {\n      dark: '/logo-dark.png',\n      light: '/logo-light.png',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\ndarkMode\n\n * Type: boolean\n * Default: true\n\nWhether a Dark/Light mode toggle button appears. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    darkMode: true,\n  },\n  plugins: [docTools()],\n});\n\n\n\noutDir\n\n * Type: string\n * Default: doc_build\n\nCustom output directory for built sites. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    outDir: 'doc_build',\n  },\n  plugins: [docTools()],\n});\n","frontmatter":{}},{"id":6,"title":"Build Config","routePath":"/doc-tools/api/config-build","lang":"en","toc":[{"id":"builderconfig","text":"builderConfig","depth":2},{"id":"markdown","text":"markdown","depth":2},{"id":"markdownremarkplugins","text":"markdown.remarkPlugins","depth":3},{"id":"markdownrehypeplugins","text":"markdown.rehypePlugins","depth":3},{"id":"markdowncheckdeadlinks","text":"markdown.checkDeadLinks","depth":3}],"domain":"","content":"\n\n\nbuilderConfig\n\nCustomize Modern.js Builder configuration, see official website configuration\nfor details.\n\n\nmarkdown\n\n * Type: Object\n\nConfigure MDX-related compilation abilities.\n\n\nmarkdown.remarkPlugins\n\n * Type: Array\n * Default: []\n\nConfigure the remark plugins. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      remarkPlugins: [\n        [\n          require('remark-autolink-headings'),\n          {\n            behavior: 'wrap',\n          },\n        ],\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nmarkdown.rehypePlugins\n\n * Type: Array\n\nConfigure the rehype plugin. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      rehypePlugins: [\n        [\n          require('rehype-autolink-headings'),\n          {\n            behavior: 'wrap',\n          },\n        ],\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nmarkdown.checkDeadLinks\n\n * Type: boolean\n * Default: false\n\nWhether to check for dead links. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      checkDeadLinks: true,\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nAfter enabling this config, the framework will check the links in the document\nbased on the conventional routing table. If there is an unreachable link, the\nbuild will throw an error and exit.\n\nWARNING\n\nHowever, we do not recommend using this feature during the development\nenvironment, because it will disable the physical cache of the build tool\nwebpack, resulting in slower project startup.","frontmatter":{}},{"id":7,"title":"Front Matter Config","routePath":"/doc-tools/api/config-frontmatter","lang":"en","toc":[{"id":"title","text":"title","depth":2},{"id":"description","text":"description","depth":2},{"id":"pagetype","text":"pageType","depth":2},{"id":"hero","text":"hero","depth":2},{"id":"features","text":"features","depth":2}],"domain":"","content":"\n\n\ntitle\n\n * Type: string\n\nThe title of the page. By default, the page's h1 heading will be used as the\ntitle of the HTML document. But if you want to use a different title, you can\nuse Front Matter to specify the title of the page. For example:\n\n---\ntitle: My Home Page\n---\n\n\n\ndescription\n\n * Type: string\n\nA custom description for the page. For example:\n\n---\ndescription: This is my custom description for this page.\n---\n\n\n\npageType\n\n * Type: 'home' | 'doc' | 'custom' | '404'\n * Default: 'doc'\n\nThe type of page. By default, the page type is doc. But if you want to use a\ndifferent page type, you can specify the page type with something preceding\npageType. For example:\n\n---\npageType: home\n---\n\n\n\nhero\n\n * Type: Object\n\nThe hero config for the home page. It has the following types:\n\nexport interface Hero {\n  name: string;\n  text: string;\n  tagline: string;\n  image?: {\n    src: string;\n    alt: string;\n  };\n  actions: {\n    text: string;\n    link: string;\n    theme: 'brand' | 'alt';\n  }[];\n}\n\n\nFor example, you can use the following Front Matter to specify a page's hero\nconfig:\n\n---\npageType: home\n\nhero:\n  name: Modern.js Doc\n  text: A documentation solution\n  tagline: A modern documentation development technology stack\n  actions:\n    - theme: brand\n      text: Introduction\n      link: /en/guide/introduction\n    - theme: alt\n      text: Quick Start\n      link: /en/guide/getting-started\n---\n\n\n\nfeatures\n\n * Type: Array\n * Default: []\n\nfeatures config of the home page. It has the following types:\n\nexport interface Feature {\n  title: string;\n  details: string;\n  icon: string;\n  // The link of the feature, not required.\n  link?: string;\n}\n\nexport type Features = Feature[];\n\n\nFor example, you could use the following to specify the features configuration\nfor the home page:\n\n---\npageType: home\n\nfeatures:\n  - title: 'MDX Support'\n    details: MDX is a powerful way to write content. You can use React components in Markdown.\n    icon: 📦\n  - title: 'Feature Rich'\n    details: Out of box support for i18n, full-text search etc.\n    icon: 🎨\n  - title: 'Customizable'\n    details: You can customize the theme ui and the build process.\n    icon: 🚀\n---\n","frontmatter":{}},{"id":8,"title":"Theme Config","routePath":"/doc-tools/api/config-theme","lang":"en","toc":[{"id":"nav","text":"nav","depth":2},{"id":"sidebar","text":"sidebar","depth":2},{"id":"footer","text":"footer","depth":2},{"id":"outlinetitle","text":"outlineTitle","depth":2},{"id":"prevpagetext","text":"prevPageText","depth":2},{"id":"sociallinks","text":"socialLinks","depth":2},{"id":"nextpagetext","text":"nextPageText","depth":2},{"id":"locales","text":"locales","depth":2}],"domain":"","content":"\n\nTheme config is located under themeConfig in the doc param. For example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      // ...\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nnav\n\n * Type: Array\n * Default: []\n\nThe nav configuration is an array of NavItem with the following types:\n\ninterface NavItem {\n  // Navbar text\n  text: string;\n  // Navbar link\n  link: '/';\n  // Activation rules for navbar links\n  activeMatch: '^/$|^/';\n}\n\n\nactiveMatch is used to match the current route, when the route matches the\nactiveMatch rule, the nav item will be highlighted. By default, activeMatch is\nthe link of the nav item.\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [\n        {\n          text: 'Home',\n          link: '/',\n        },\n        {\n          text: 'Guide',\n          link: '/guide/',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n当然 nav 数组中也可以配置多级菜单，类型如下:\n\ninterface NavGroup {\n  // 导航栏文本\n  text: string;\n  // 子菜单\n  items: NavItem[];\n}\n\n\nFor example the following configuration:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [\n        {\n          text: 'Home',\n          link: '/',\n        },\n        {\n          text: 'Guide',\n          items: [\n            {\n              text: 'Getting Started',\n              link: '/guide/getting-started',\n            },\n            {\n              text: 'Advanced',\n              link: '/guide/advanced',\n            },\n            // Also support sub group menu\n            {\n              text: 'Group',\n              items: [\n                {\n                  text: 'Personal',\n                  link: 'http://xxx.com/',\n                },\n                {\n                  text: 'Company',\n                  link: 'http://xxx.com/',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nsidebar\n\n * Type: Object\n\nThe sidebar of the website. The config is an object with the following types:\n\n// The key is the path of SidebarGroup\n// value is an array of SidebarGroup\ntype Sidebar = Record<string, SidebarGroup[]>;\n\ninterface SidebarGroup {\n  text: string;\n  items: SidebarItem[];\n  collapsable?: boolean;\n  collapsed?: boolean;\n}\n\n// An object can be filled in, or a string can be filled in\n// When filling in a string, it will be converted into an object internally, the string will be used as a link, and the text value will automatically take the title of the corresponding document\ntype SidebarItem =\n  | {\n      // sidebar text\n      text: string;\n      // sidebar link\n      link: string;\n    }\n  | string;\n\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      sidebar: {\n        '/guide/': [\n          {\n            text: 'Getting Started',\n            items: [\n              // Fill in an object\n              {\n                text: 'Introduction',\n                link: '/guide/getting-started/introduction',\n              },\n              {\n                text: 'Installation',\n                link: '/guide/getting-started/installation',\n              },\n            ],\n          },\n          {\n            text: 'Advanced',\n            items: [\n              // Fill in the link string directly\n              '/guide/advanced/customization',\n              '/guide/advanced/markdown',\n            ],\n          },\n        ],\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nfooter\n\n * Type: Object\n * Default: {}\n\nThe footer of the home page.\n\nThe footer config is an object of Footer, which has the following types:\n\nexport interface Footer {\n  message?: string;\n  copyright?: string;\n}\n\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      footer: {\n        message: 'This is a footer',\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\noutlineTitle\n\n * Type: string\n * Default: 'ON THIS PAGE'\n\nConfigure the title of the outline in the outline panel.\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      outlineTitle: 'Outline',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nprevPageText\n\n * Type: string\n * Default: Previous Page\n\nThe text of the previous page. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      prevPageText: 'Previous Page',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nsocialLinks\n\n * Type: Array\n * Default: []\n\nYou can add related links through the following config, such as github links,\ntwitter links, etc. Related links support three modes: link mode text mode image\nmode, for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      socialLinks: [\n        {\n          icon: 'github',\n          mode: 'link',\n          content: 'https://github.com/sanyuan0704/island.js',\n        },\n        {\n          icon: 'wechat',\n          mode: 'text',\n          content: 'wechat: xxx',\n        },\n        {\n          icon: 'qq',\n          mode: 'img',\n          content: '/qrcode.png',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n * When in link mode, click the icon to jump to the link.\n * When in text mode, when the mouse moves over the icon, a pop-up box will be\n   displayed, and the content of the pop-up box is the entered text\n * When in the img mode, moving the mouse over the icon will display a bullet\n   box, and the content of the bullet box is the specified picture. It should be\n   noted that the picture needs to be placed in the public directory.\n\nRelated links support the following types of images, which can be selected\nthrough the icon attribute:\n\nexport type SocialLinkIcon =\n  | 'discord'\n  | 'facebook'\n  | 'github'\n  | 'instagram'\n  | 'linkedin'\n  | 'slack'\n  | 'twitter'\n  | 'youtube'\n  | 'weixin'\n  | 'qq'\n  | 'juejin'\n  | 'zhihu'\n  | 'bilibili'\n  | 'weibo'\n  | { svg: string };\n\n\nIf you need to customize the icon, you can pass in an object with svg attribute,\nand the value of svg is the content of the custom icon, for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      socialLinks: [\n        {\n          icon: {\n            svg: '<svg>xxx</svg>',\n          },\n          mode: 'link',\n          content: 'https://github.com/',\n        },\n      ],\n    },\n  }\n  plugins: [docTools()],·\n});\n\n\n\nnextPageText\n\n * Type: string\n * Default: Next Page\n\nText for the next page. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nextPageText: 'Next Page',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nlocales\n\n * Type: Array<LocaleConfig>\n * Default: undefined\n\nI18n config. This config is an array, and every item of it is LocaleConfig, and\nthe types are as follows:\n\nexport interface LocaleConfig {\n  // language name\n  lang?: string;\n  // HTML title, takes precedence over `themeConfig.title\n  title?: string;\n  // HTML description, takes precedence over `themeConfig.description`\n  description?: string;\n  // Display text for the corresponding language\n  label: string;\n  // Navbar config, takes precedence over `themeConfig.nav\n  nav?: NavItem[];\n  // Sidebar config, takes precedence over `themeConfig.sidebar`\n  sidebar?: Sidebar;\n  // Right outline title\n  outlineTitle?: string;\n  // Previous text\n  prevPageText?: string;\n  // Next page text\n  nextPageText?: string;\n}\n\n\nLocaleConfig contains many of the same configuration items as the theme config,\nbut the former will have a higher priority.","frontmatter":{}},{"id":10,"title":"Internal Components","routePath":"/doc-tools/guide/components","lang":"en","toc":[],"domain":"","content":"\n\nSee details in Internal Components.","frontmatter":{}},{"id":11,"title":"Conventional Route","routePath":"/doc-tools/guide/conventional-route","lang":"en","toc":[{"id":"what-is-it","text":"What is it?","depth":2},{"id":"mapping-rules","text":"Mapping Rules","depth":2},{"id":"custom-behavior","text":"Custom Behavior","depth":2},{"id":"best-practices","text":"Best Practices","depth":2}],"domain":"","content":"\n\n\nWhat is it?\n\nModern.js Doc uses file system routing, and the file path of the page is simply\nmapped to the routing path, which makes the routing of the entire project very\nintuitive.\n\nFor example, if there is a file named foo.md in the docs directory, the routing\npath for that file will be /foo.\n\n\nMapping Rules\n\nModern.js Doc automatically scans the root directory and all subdirectories, and\nmaps file paths to route paths. For example, if you have the following file\nstructure:\n\ndocs\n├── foo\n│   └── bar.md\n└── foo.md\n\n\nThen bar.md will be routed to /foo/bar, and foo.md will be routed to /foo.\n\nThe specific mapping rules are as follows:\n\n| file path | route path | | --------------- | ---------- | | index.md | / | |\n/foo.md | /foo | | /foo/bar.md | /foo/bar | | /zoo/index.md | /zoo |\n\n\nCustom Behavior\n\nIf you want to customize the routing behavior, you can use the route field in\nthe configuration file. For example:\n\n\n\nexport default defineConfig({\n  route: {\n    // These files will be excluded from the routing (support glob pattern)\n    exclude: ['custom.tsx', 'component/**/*']\n    // These files will be included in the routing (support glob pattern)\n    include: ['other-dir/**/*'],\n  }\n});\n\n\n\nBest Practices\n\nWe recommend that you place documentation files in the docs directory to make\nyour project more clear. For non-documentation content, such as custom\ncomponents, util functions, etc., they can be maintained outside the docs\ndirectory. For example:\n\ndocs\n└── foo.mdx\nsrc\n├── components\n│   └── CustomComponent.tsx\n└── utils\n    └── utils.ts\n","frontmatter":{}},{"id":12,"title":"Doc Page","routePath":"/doc-tools/guide/doc-page","lang":"en","toc":[],"domain":"","content":"\n\n🚧 Under construction","frontmatter":{}},{"id":13,"title":"Quick Start","routePath":"/doc-tools/guide/getting-started","lang":"en","toc":[{"id":"1-initialize-the-project","text":"1. Initialize the project","depth":2},{"id":"2-start-dev-server","text":"2. Start Dev Server","depth":2},{"id":"3-build-in-production","text":"3. Build in Production","depth":2},{"id":"4-preview-in-local-environment","text":"4. Preview in local environment","depth":2}],"domain":"","content":"\n\n\n1. Initialize the project\n\nFirst, you can create a new directory with the following command:\n\nmkdir modern-doc-app && cd modern-doc-app\n\n\nExecute npm init -y to initialize a project. You can install Modern.js Doc using\nnpm, yarn or pnpm:\n\n<Tabs values={[{ label: 'npm' }, { label: 'yarn' }, { label: 'pnpm' }]}>\n\nnpm install @modern-js/doc-tools -D\n\n\nyarn add @modern-js/doc-tools -D\n\n\npnpm install @modern-js/doc-tools -D\n\n\nThen create the file with the following command\n\nmkdir docs && echo '# Hello World' > docs/index.md\n\n\n在package.json中加上如下的脚本: => Add the following script to package.json:\n\n{\n  \"scripts\": {\n    \"dev\": \"modern dev\",\n    \"build\": \"modern build\",\n    \"preview\": \"modern preview\"\n  }\n}\n\n\nThen initialize a configuration file modern.config.ts:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    root: path.join(__dirname, 'docs'),\n  },\n  plugins: [docTools()],\n});\n\n\n\n2. Start Dev Server\n\nStart the local development service with the following command:\n\nnpm run dev\n\n\n\n3. Build in Production\n\nBuild the production bundle with the following command :\n\nnpm run build\n\n\nBy default, Modern.js Doc will set doc_build as the output directory.\n\n\n4. Preview in local environment\n\nStart the local preview service with the following command:\n\nnpm run preview\n","frontmatter":{}},{"id":14,"title":"Custom Global Styles","routePath":"/doc-tools/guide/global-styles","lang":"en","toc":[{"id":"usage","text":"Usage","depth":2}],"domain":"","content":"\n\nIn some scenarios, you may need to add some global styles based on the theme UI.\nThe framework provides a config param globalStyles to implement it.\n\n\nUsage\n\nAdd the following config to modern.config.ts:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    globalStyles: [path.join(__dirname, 'styles/index.css')],\n  },\n  plugins: [docTools()],\n});\n\n\nThen you can add the following code:\n\n/* styles/index.css */\n:root {\n  --modern-c-brand: #f00;\n}\n\n\nIn this way, the framework will automatically collect all global styles and\nmerge them into the final style file.\n\n> If you want to know more about internal global styles, you can check vars.css\n> and doc.css。","frontmatter":{}},{"id":15,"title":"Home Page","routePath":"/doc-tools/guide/home-page","lang":"en","toc":[],"domain":"","content":"\n\nYou can define the content of the Home page through frontmatter, see FrontMatter\nConfig for detailed types. Here is a simple example:\n\n---\npageType: home\n\nhero:\n  name: Modern.js Doc\n  text: A documentation solution\n  tagline: A modern documentation development technology stack\n  actions:\n    - theme: brand\n      text: Introduction\n      link: /en/guide/introduction\n    - theme: alt\n      text: Quick Start\n      link: /en/guide/getting-started\n\nfeatures:\n  - title: 'MDX Support'\n    details: MDX is a powerful way to write content. You can use React components in Markdown.\n    icon: 📦\n  - title: 'Feature Rich'\n    details: Out of box support for i18n, full-text search etc.\n    icon: 🎨\n  - title: 'Customizable'\n    details: You can customize the theme ui and the build process.\n    icon: 🚀\n---\n","frontmatter":{}},{"id":16,"title":"I18n","routePath":"/doc-tools/guide/i18n","lang":"en","toc":[{"id":"configure-default-language","text":"Configure Default Language","depth":2},{"id":"configure-docthemeconfiglocales","text":"Configure doc.themeConfig.locales","depth":2},{"id":"create-documents","text":"Create Documents","depth":2}],"domain":"","content":"\n\nTo implement i18n in Modern.js Doc, you need to do three things:\n\n * 1. Configure the default language.\n * 2. Configure doc.themeConfig.locales。\n * 3. Create documents in different language version.\n\n\nConfigure Default Language\n\nIn modern.config.ts, you can configure the default language of the document via\ndoc.lang, as shown in the following example:\n\n\n\nexport default defineConfig({\n  doc: {\n    lang: 'zh',\n  },\n  plugins: [docTools()],\n});\n\n\nThis is important, because for routes in the default language, the framework\nwill remove the language prefix, such as /zh/guide/getting-started will be\nconverted to /guide/getting-started.\n\n\nConfigure doc.themeConfig.locales\n\nIn modern.config.ts, you can configure the multiple version of the document via\ndoc.themeConfig.locales, as shown in the following example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      // locales is an array of object\n      locales: [\n        {\n          lang: 'en',\n          // Labels for switching languages ​​in the navbar\n          label: 'English',\n          title: 'Modern.js',\n          description: 'Modern.js 文档框架',\n        },\n        {\n          lang: 'zh',\n          // Labels for switching languages ​​in the navbar\n          label: '简体中文',\n          title: 'Modern.js',\n          description: 'Modern.js Doc',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nIn this example, we configure the title, description, and navbar language labels\nfor documents in different languages. Of course, in general, we also need to\nconfigure other information, such as sidebar, nav, etc. Let's take nav as an\nexample to see how to configure it.\n\nFirst, we create a new util function to return different text and links\naccording to the language: :\n\n// Added util functions, return getText and getLink methods\nfunction getI18nHelper(lang: 'zh' | 'en') {\n  const isZh = lang === 'zh';\n  // Currently the default language is Chinese, so the prefix here is '', if the default language is English, then the prefix is ​​'/en'\n  const prefix = isZh ? '' : '/en';\n  const getLink = (str: string) => `${prefix}${str}`;\n  const getText = (zhText: string, enText: string) => (isZh ? zhText : enText);\n  return { getText, getLink };\n}\n\n\nThen write the nav configuration based on the util function:\n\nfunction getNavbar(lang: 'zh' | 'en'): NavItem[] {\n  const { getLink, getText } = getI18nHelper(lang);\n\n  return [\n    {\n      text: getText('指南', 'Guide'),\n      link: getLink('/guide/getting-started'),\n      activeMatch: '/guide/',\n    },\n    {\n      text: getText('API', 'API'),\n      link: getLink('/api/'),\n      activeMatch: '/api/',\n    },\n  ];\n}\n\n\nFinally used in locales config:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      locales: [\n        {\n          lang: 'en',\n          label: 'English',\n          title: 'Modern.js',\n          description: 'Modern.js 文档框架',\n+          nav: getNavbar('en'),\n        },\n        {\n          lang: 'zh',\n          label: '简体中文',\n          title: 'Modern.js',\n          description: 'Modern.js Doc',\n+          nav: getNavbar('zh'),\n        },\n      ]\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nFor other i18n parameters, please refer to API type.\n\n\nCreate Documents\n\nNow we can start to create documents in different language versions. It is very\nsimple. We only need to create the following structure in the document root\ndirectory:\n\ndocs\n├── en\n│   ├── api\n│   │   └── index.md\n│   └── guide\n│       └── getting-started.md\n└── zh\n    ├── api\n    │   └── index.md\n    └── guide\n        └── getting-started.md\n\n\nAs you can see, we put documents in different languages in the en and zh\ndirectories under the docs directory, so that we can easily distinguish\ndocuments in different languages.","frontmatter":{}},{"id":17,"title":"Introduction","routePath":"/doc-tools/guide/introduction","lang":"en","toc":[{"id":"position","text":"Position","depth":2},{"id":"features","text":"Features","depth":2},{"id":"support-mdx","text":"Support MDX","depth":3},{"id":"support-full-text-search","text":"Support Full-Text Search","depth":3},{"id":"support-i18n","text":"Support I18n","depth":3},{"id":"code-block-syntax-highlighting","text":"Code Block Syntax Highlighting","depth":3},{"id":"support-custom-theme","text":"Support Custom Theme","depth":3},{"id":"support-plugin-system","text":"Support Plugin System","depth":3}],"domain":"","content":"\n\n\nPosition\n\nModern.js Doc is a front-end framework for document site scenarios, and its goal\nis to provide developers with a simple, efficient, and scalable document site\nsolution.\n\nThe original intention of this document framework is to provide a ducument\nsolution for the company's internal technical products, and to meet some special\ninternal needs, such as cross-site search service. However, for common document\nsite building needs, we have also provided relatively complete support, such as\nsupport for i18n, full-text search, custom themes, and so on.\n\nAt the same time, the framework is based on Modern.js Builder, with a variety of\nbuilt-in optimization strategies to provide better DX. In the near future, we\ncan access to Rust-based bundler Rspack through Modern.js Builder to make the\nbuild speed faster.\n\n\nFeatures\n\n\nSupport MDX\n\nModern.js Doc is based on MDX to extend the Markdown syntax.It supports the use\nof React components in Markdown, and supports the use of JSX syntax in Markdown,\nwhich is more flexible in syntax.\n\nPlease refer to the syntax details in Use MDX\n\n\nSupport Full-Text Search\n\nBased on the FlexSearch search engine, it provides out-of-the-box document\nsearch capabilities.\n\n\nSupport I18n\n\nBuilt-in i18n support, supports multi-language switching, and supports\nmulti-language content search.\n\n\nCode Block Syntax Highlighting\n\nBased on Shiki for compile-time code coloring, it supports multiple code\nlanguage highlighting. For example:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    root: path.join(__dirname, 'docs'),\n  },\n  plugins: [docTools()],\n});\n\n\n\nSupport Custom Theme\n\nSupports custom themes, which can be customized through configuration files,\nplease refer to Theme Customization for details.\n\n\nSupport Plugin System\n\nYou can extend the abilities of Modern.js Doc through custom plugins. For\ndetails, please refer to Plugin Mechanism.","frontmatter":{}},{"id":18,"title":"Navbar","routePath":"/doc-tools/guide/navbar","lang":"en","toc":[{"id":"custom-navigation-menu","text":"Custom Navigation Menu","depth":2},{"id":"navitemwithlink","text":"NavItemWithLink","depth":3},{"id":"navitemwithchildren","text":"NavItemWithChildren","depth":3},{"id":"example","text":"Example","depth":3},{"id":"lightdark-mode","text":"Light/Dark Mode","depth":2},{"id":"related-links","text":"Related Links","depth":2}],"domain":"","content":"\n\nThe navbar is very important to a website. It allows users to quickly jump\nbetween different pages of the website, and also allows users to quickly find\nsome important information of the website.\n\n\nCustom Navigation Menu\n\nYou can add a custom navigation menu in themeConfig.nav, configured as an array,\nas follows:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nThe nav bar is configured as an array, and each item in the array is a NavItem\nobject, which has the following types:\n\nexport type NavItem = NavItemWithLink | NavItemWithChildren;\n\n\nThat is, each navbar element ( NavItem ) can be a link ( NavItemWithLink ), or a\nnavbar group containing child elements ( NavItemWithChildren ).\n\n\nNavItemWithLink\n\nexport interface NavItemWithLink {\n  text: string;\n  link: string;\n  activeMatch?: string;\n}\n\n\nThe meanings of the attributes are as follows:\n\n-text - Navbar text -link - Navbar link -activeMatch - activation rule for\nnavbar links\n\nactiveMatch is used to match the current route, when the route matches the\nactiveMatch rule, the nav item will be highlighted.\n\n> By default, activeMatch is the link attribute of NavItem.\n\n\nNavItemWithChildren\n\nexport interface NavItemWithChildren {\n  text: string;\n  items: NavItem[];\n}\n\n\nThe meanings of the attributes are as follows:\n\n-text - Navbar text -items - subnavbar elements\n\n\nExample\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [\n        {\n          text: 'Home',\n          link: '/',\n        },\n        {\n          text: 'Links',\n          items: [\n            {\n              text: 'Github',\n              link: 'http://github.com/',\n            },\n            {\n              text: 'Twitter',\n              link: 'http://twitter.com/',\n            },\n          ],\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nLight/Dark Mode\n\nBy default, the navbar will have a toggle button for Light/Dark mode, you can\ndisable it with the following config:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      darkMode: false,\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nRelated Links\n\nSocial Links to the Site. For example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      socialLinks: [\n        {\n          icon: 'github',\n          link: 'github.com/web-infra-dev/modern.js',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nFor more configurations, please refer to links.","frontmatter":{}},{"id":19,"title":"Overview Page","routePath":"/doc-tools/guide/overview-page","lang":"en","toc":[{"id":"effect","text":"Effect","depth":2},{"id":"how-to-use","text":"How to use","depth":2},{"id":"1-create-a-new-directory-and-configure-frontmatter","text":"1. Create a new directory and configure frontmatter","depth":3},{"id":"2-configure-sidebar","text":"2. Configure sidebar","depth":3}],"domain":"","content":"\n\n\nEffect\n\nModern.js Doc has a built-in preview page, the effect is as follows:\n\n\nHow to use\n\nGenerating the preview page requires the following two steps:\n\n\n1. Create a new directory and configure frontmatter\n\nFor example, create the following directories and files\n\n├── docs\n│   ├── index.md\n│   ├── api\n│   │   ├── index.md\n│   │   ├── preview1.md\n│   │   └── preview2.md\n// ...\n\n\nWe add the following to api/index.md:\n\n---\noverview: true\n---\n\n\n\n2. Configure sidebar\n\nThe structure of the overview page will be generated based on the config of the\nsidebar. For example, we add the following sidebar config:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      sidebar: {\n        '/api/': [\n          {\n            text: 'Group1',\n            items: [\n              // Note: Documents need to be created in advance\n              '/api/foo',\n              '/api/bar',\n            ],\n          },\n          {\n            text: 'Group2',\n            items: ['/api/xxx', '/api/yyy'],\n          },\n        ],\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nThe framework will extract all the files under the api directory and the h1 and\nh2 titles in them, and generate a overview page according to the group info in\nthe sidebar config.","frontmatter":{}},{"id":20,"title":"Static Assets","routePath":"/doc-tools/guide/static-assets","lang":"en","toc":[],"domain":"","content":"\n\nYou can import static assets in markdown (or mdx) files. Both relative and\nabsolute paths are supported. For example, if you have an image in the same\ndirectory as markdown, you can reference it like this:\n\n![](./demo.png)\n\n\nOf course, you can also directly use the img tag in .mdx files:\n\n<img src=\"./demo.png\" />\n\n\nModern.js Doc will automatically find the image and respond to the browser\naccording to the .mdx file path and image path.\n\nOn the other hand, static resources can also be imported using absolute paths.\nIn this way, Modern.js Doc will look for resources in the public folder under\nthe root directory of the project, which is the directory specified by the\ndoc.root field in modern.config.ts.\n\n\n\nexport default defineConfig({\n  doc: {\n    root: path.join(__dirname, 'docs'),\n  },\n});\n\n\nFor example, if the root directory is docs and the directory structure is as\nfollows:\n\ndocs\n├── public\n│   └── demo.png\n├── index.mdx\n\n\nIn the index.mdx file above, you can reference demo.png like this:\n\n![](./public/demo.png)\n\n\nOr refer to it with an absolute path:\n\n![](/demo.png)\n","frontmatter":{}},{"id":21,"title":"Use MDX","routePath":"/doc-tools/guide/use-mdx","lang":"en","toc":[{"id":"markdown","text":"Markdown","depth":2},{"id":"use-component","text":"Use Component","depth":2},{"id":"front-matter","text":"Front Matter","depth":2},{"id":"custom-container","text":"Custom Container","depth":2},{"id":"code-block","text":"Code Block","depth":2}],"domain":"","content":"\n\nModern.js Doc supports MDX, a powerful way to develop content.\n\n\nMarkdown\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n# Hello World\n\n\n\nUse Component\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n// docs/index.mdx\n\n\n# Hello World\n\n<CustomComponent />\n\n\n\nFront Matter\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n---\ntitle: Hello World\n---\n\n\n> Note: By default, Modern.js Doc uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n---\ntitle: Hello World\n---\n\n# {frontmatter.title}\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n<h1>Hello World</h1>\n\n\n\nCustom Container\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n:::tip\nThis is a `block` of type `tip`\n:::\n\n:::info\nThis is a `block` of type `info`\n:::\n\n:::warning\nThis is a `block` of type `warning`\n:::\n\n:::danger\nThis is a `block` of type `danger`\n:::\n\n:::tip Custom Title\nThis is a `block` of `Custom Title`\n:::\n\n:::tip{title=\"Custom Title\"}\nThis is a `block` of `Custom Title`\n:::\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode Block\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n```js\nconsole.log('Hello World');\n```\n\n```js title=\"hello.js\"\nconsole.log('Hello World');\n```\n\n\nOutput:\n\nconsole.log('Hello World');\n\n\nconsole.log('Hello World');\n","frontmatter":{}},{"id":23,"title":"自定义主题","routePath":"/doc-tools/zh/advanced/custom-theme","lang":"zh","toc":[],"domain":"","content":"\n\n🚧 建设中","frontmatter":{}},{"id":24,"title":"构建能力扩展","routePath":"/doc-tools/zh/advanced/extend-build","lang":"zh","toc":[{"id":"modernjs-builder","text":"Modern.js Builder","depth":2},{"id":"mdx-编译插件","text":"MDX 编译插件","depth":2}],"domain":"","content":"\n\n\nModern.js Builder\n\nModern.js Doc 基于 Modern.js Builder 来进行项目构建，你可以使用 builderConfig 来自定义构建配置。比如:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    builderConfig: {\n      dev: {\n        startUrl: false,\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nMDX 编译插件\n\n在框架中 MDX 的编译基于 unified 完成，你可以通过 markdown 配置来添加相关的编译插件。比如\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      remarkPlugins: [\n        [\n          require('remark-autolink-headings'),\n          {\n            behavior: 'wrap',\n          },\n        ],\n      ],\n      rehypePlugins: [require('rehype-slug')],\n    },\n  },\n  plugins: [docTools()],\n});\n","frontmatter":{}},{"id":25,"title":"插件机制","routePath":"/doc-tools/zh/advanced/plugin-system","lang":"zh","toc":[],"domain":"","content":"\n\n🚧 建设中","frontmatter":{}},{"id":26,"title":"内置组件","routePath":"/doc-tools/zh/api/api-components","lang":"zh","toc":[{"id":"nossr","text":"NoSSR","depth":2},{"id":"tabtabs","text":"Tab/Tabs","depth":2}],"domain":"","content":"\n\n\nNoSSR\n\n用于在服务端渲染时不渲染某些组件。使用方法如下：\n\n\n\nconst Component = () => {\n  return (\n    <NoSSR>\n      <div>这里的内容只会在客户端渲染</div>\n    </NoSSR>\n  );\n};\n\n\n\nTab/Tabs\n\n你可以在文档中直接使用 Tab/Tabs 组件来实现 tab 切换的效果。比如\n\n\n\n<Tabs>\n  <Tab label=\"Tab 1\">Tab 1 content</Tab>\n  <Tab label=\"Tab 2\">Tab 2 content</Tab>\n</Tabs>\n\n\n提醒\n\n为了让你更方便地使用这些组件，框架内部对于 @modern-js/doc-tools/theme 这个包做了 alias 处理，所以你可以直接使用\n@theme来引入这些组件。\n\n其中 Tabs 组件的 props 类型如下:\n\ninterface TabsProps {\n  children: React.ReactNode;\n  defaultValue?: string;\n  groupId?: string;\n}\n\n\ndefaultValue 用于设置默认选中的 tab 项，这个值会和 Tab 组件的 value 字段做比较，如果相等则选中该 tab。\n\ngroupId 用于设置 tab 项的分组，当你需要多个 Tabs 组件进行联动的时候，可以通过 groupId 来实现。groupId 相同的 Tabs\n组件会进行联动。\n\nTab 组件的 props 类型如下:\n\ninterface TabProps {\n  label: string;\n  // 用于标识当前 tab，如果不传则默认使用 label\n  value?: string;\n  children: React.ReactNode;\n}\n\n\n其中的 value 字段用于标识当前 tab，如果不传则默认使用 label。","frontmatter":{}},{"id":27,"title":"Runtime API","routePath":"/doc-tools/zh/api/api-runtime","lang":"zh","toc":[{"id":"usepagedata","text":"usePageData","depth":2},{"id":"uselang","text":"useLang","depth":2},{"id":"路由-hook","text":"路由 Hook","depth":2}],"domain":"","content":"\n\nModern.js Doc 暴露一些运行时 API，方便你做一些自定义的逻辑。\n\n\nusePageData\n\n获取当前页面的数据，返回值为一个对象，包含了当前页面的所有数据。\n\n\n\nfunction MyComponent() {\n  const pageData = usePageData();\n  return <div>{pageData.title}</div>;\n}\n\n\n\nuseLang\n\n获取当前语言，返回值为一个字符串，即当前语言。\n\n\n\nfunction MyComponent() {\n  const lang = useLang();\n  // lang === 'zh-CN'\n  return <div>{lang}</div>;\n}\n\n\n\n路由 Hook\n\n框架内部使用并重导出了 react-router-dom 的所有 API，你可以这样来使用:\n\n\n\nfunction MyComponent() {\n  const location = useLocation();\n  return <div>{location.pathname}</div>;\n}\n","frontmatter":{}},{"id":28,"title":"基础配置","routePath":"/doc-tools/zh/api/config-basic","lang":"zh","toc":[{"id":"base","text":"base","depth":2},{"id":"title","text":"title","depth":2},{"id":"description","text":"description","depth":2},{"id":"icon","text":"icon","depth":2},{"id":"logo","text":"logo","depth":2},{"id":"darkmode","text":"darkMode","depth":2},{"id":"outdir","text":"outDir","depth":2}],"domain":"","content":"\n\n\nbase\n\n * Type: string\n * Default: /\n\n部署基准路径。比如，如果你计划将你的站点部署到 https://foo.github.io/bar/，那么你应该将 base 设置为 \"/bar/\"：\n\n\n\nexport default defineConfig({\n  doc: {\n    base: '/bar/',\n  },\n  plugins: [docTools()],\n});\n\n\n\ntitle\n\n * Type: string\n * Default: \"Island\"\n\n站点标题。这个参数将被用作 HTML 页面的标题。例如：\n\n\n\nexport default defineConfig({\n  doc: {\n    title: '我的站点',\n  },\n  plugins: [docTools()],\n});\n\n\n\ndescription\n\n * Type: string\n * Default: \"\"\n\n站点描述。这将用作 HTML 页面的描述。例如：\n\n\n\nexport default defineConfig({\n  doc: {\n    description: '我的站点描述',\n  },\n  plugins: [docTools()],\n});\n\n\n\nicon\n\n * Type: string\n * Default: \"\"\n\n站点图标。这个路径将用作 HTML 页面的图标路径。例如：\n\n\n\nexport default defineConfig({\n  doc: {\n    icon: '/favicon.ico',\n  },\n  plugins: [docTools()],\n});\n\n\n框架会在 public 目录中找到你的图标，当然你也可以设置成一个 CDN 地址。\n\n\nlogo\n\n * Type: string | { dark: string; light: string }\n * Default: \"\"\n\n站点 logo。这个路径将用作导航栏左上角的 logo 路径。例如：\n\n\n\nexport default defineConfig({\n  doc: {\n    logo: '/logo.png',\n  },\n  plugins: [docTools()],\n});\n\n\n框架会在 public 目录中找到你的图标，当然你也可以设置成一个 CDN 地址。\n\n当然你可以针对浅色/暗黑模式设置不同的 logo：\n\n\n\nexport default defineConfig({\n  doc: {\n    logo: {\n      dark: '/logo-dark.png',\n      light: '/logo-light.png',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\ndarkMode\n\n * Type: boolean\n * Default: true\n\n是否出现暗黑模式/白天模式切换按钮。比如：\n\n\n\nexport default defineConfig({\n  doc: {\n    darkMode: true,\n  },\n  plugins: [docTools()],\n});\n\n\n\noutDir\n\n * Type: string\n * Default: doc_build\n\n自定义构建站点的输出目录。比如:\n\n\n\nexport default defineConfig({\n  doc: {\n    outDir: 'doc_build',\n  },\n  plugins: [docTools()],\n});\n","frontmatter":{}},{"id":29,"title":"构建配置","routePath":"/doc-tools/zh/api/config-build","lang":"zh","toc":[{"id":"builderconfig","text":"builderConfig","depth":2},{"id":"markdown","text":"markdown","depth":2},{"id":"markdownremarkplugins","text":"markdown.remarkPlugins","depth":3},{"id":"markdownrehypeplugins","text":"markdown.rehypePlugins","depth":3},{"id":"markdowncheckdeadlinks","text":"markdown.checkDeadLinks","depth":3}],"domain":"","content":"\n\n\nbuilderConfig\n\n自定义 Modern.js Builder 配置，详见 官网配置。\n\n\nmarkdown\n\n * Type: Object\n\n配置 MDX 相关的编译能力。\n\n\nmarkdown.remarkPlugins\n\n * Type: Array\n * Default: []\n\n配置 remark 插件。比如：\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      remarkPlugins: [\n        [\n          require('remark-autolink-headings'),\n          {\n            behavior: 'wrap',\n          },\n        ],\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nmarkdown.rehypePlugins\n\n * Type: Array\n\n配置 rehype 插件。比如：\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      rehypePlugins: [\n        [\n          require('rehype-autolink-headings'),\n          {\n            behavior: 'wrap',\n          },\n        ],\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nmarkdown.checkDeadLinks\n\n * Type: boolean\n * Default: false\n\n是否检查死链。比如：\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      checkDeadLinks: true,\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n开启这个配置后，框架会基于约定式路由表对文档中的链接进行检查，若出现无法访问的链接，构建会抛出错误并退出。\n\nWARNING\n\n不过我们并不推荐在开发阶段使用这个功能，因为它会禁用底层构建工具 webpack 的物理缓存，导致项目启动速度变慢。","frontmatter":{}},{"id":30,"title":"Front Matter 配置","routePath":"/doc-tools/zh/api/config-frontmatter","lang":"zh","toc":[{"id":"title","text":"title","depth":2},{"id":"description","text":"description","depth":2},{"id":"pagetype","text":"pageType","depth":2},{"id":"hero","text":"hero","depth":2},{"id":"features","text":"features","depth":2}],"domain":"","content":"\n\n\ntitle\n\n * Type: string\n\n页面的标题。默认情况下，页面的 h1 标题将用作 HTML 文档的标题。但是如果你想使用不同的标题，你可以使用 Front Matter\n来指定页面的标题。例如：\n\n---\ntitle: 我的主页\n---\n\n\n\ndescription\n\n * Type: string\n\n页面的自定义描述。例如：\n\n---\ndescription: 这是我的主页\n---\n\n\n\npageType\n\n * Type: 'home' | 'doc' | 'custom' | '404'\n * Default: 'doc'\n\n页面的类型。默认情况下，页面类型为doc。但是如果你想使用不同的页面类型，你可以使用pageType前面的东西来指定页面类型。例如：\n\n---\npageType: home\n---\n\n\n\nhero\n\n * Type: Object\n\nhome 页面的 hero 配置。它有以下类型：\n\nexport interface Hero {\n  name: string;\n  text: string;\n  tagline: string;\n  image?: {\n    src: string;\n    alt: string;\n  };\n  actions: {\n    text: string;\n    link: string;\n    theme: 'brand' | 'alt';\n  }[];\n}\n\n\n例如，你可以使用以下 Front Matter 来指定页面的 hero config：\n\n---\npageType: home\n\nhero:\n  name: Modern.js Doc\n  text: 文档工程解决方案\n  tagline: 现代化文档开发技术栈\n  actions:\n    - theme: brand\n      text: 介绍\n      link: /zh/guide/introduction\n    - theme: alt\n      text: 快速开始\n      link: /zh/guide/getting-started\n---\n\n\n\nfeatures\n\n * Type: Array\n * Default: []\n\nhome 页面的功能配置。它有以下类型：\n\nexport interface Feature {\n  title: string;\n  details: string;\n  icon: string;\n  // feature 卡片跳转链接，选填\n  link?: string;\n}\n\nexport type Features = Feature[];\n\n\n例如，你可以使用以下内容来指定 home 页面的 features 配置：\n\n---\npageType: home\n\nfeatures:\n  - title: 'MDX: 使用灵活语法编写内容'\n    details: MDX 是一种强大的内容编写方式，你可以在 Markdown 中使用 React 组件。\n    icon: 📦\n  - title: '功能丰富: 一站式解决方案'\n    details: 对全文搜索、国际化等常见功能可以做到开箱即用。\n    icon: 🎨\n  - title: '扩展性强: 提供多种自定义能力'\n    details: 通过其扩展机制，你可以轻松的扩展主题 UI 和构建能力。\n    icon: 🚀\n---\n","frontmatter":{}},{"id":31,"title":"主题配置","routePath":"/doc-tools/zh/api/config-theme","lang":"zh","toc":[{"id":"nav","text":"nav","depth":2},{"id":"sidebar","text":"sidebar","depth":2},{"id":"footer","text":"footer","depth":2},{"id":"outlinetitle","text":"outlineTitle","depth":2},{"id":"prevpagetext","text":"prevPageText","depth":2},{"id":"sociallinks","text":"socialLinks","depth":2},{"id":"nextpagetext","text":"nextPageText","depth":2},{"id":"locales","text":"locales","depth":2}],"domain":"","content":"\n\n主题配置位于 doc 配置中的 themeConfig 下。例如：\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      // ...\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nnav\n\n * Type: Array\n * Default: []\n\n网站的导航栏。 nav 配置是 NavItem 的数组，具有以下类型：\n\ninterface NavItem {\n  // 导航栏文本\n  text: string;\n  // 导航栏链接\n  link: '/';\n  // 导航栏链接的激活规则\n  activeMatch: '^/$|^/';\n}\n\n\nactiveMatch 用于匹配当前路由，当路由匹配 activeMatch 规则时，nav 项会高亮显示。默认情况下，activeMatch 是 nav 项的\nlink。\n\n比如:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [\n        {\n          text: 'Home',\n          link: '/',\n        },\n        {\n          text: 'Guide',\n          link: '/guide/',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n当然 nav 数组中也可以配置多级菜单，类型如下:\n\ninterface NavGroup {\n  // 导航栏文本\n  text: string;\n  // 子菜单\n  items: NavItem[];\n}\n\n\n例如下面的配置:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [\n        {\n          text: 'Home',\n          link: '/',\n        },\n        {\n          text: 'Guide',\n          items: [\n            {\n              text: 'Getting Started',\n              link: '/guide/getting-started',\n            },\n            {\n              text: 'Advanced',\n              link: '/guide/advanced',\n            },\n          ],\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nsidebar\n\n * Type: Object\n\n网站的侧边栏。配置为一个对象，类型如下：\n\n// key 为 SidebarGroup 的路径\n// value 为 SidebarGroup 的数组\ntype Sidebar = Record<string, SidebarGroup[]>;\n\ninterface SidebarGroup {\n  text: string;\n  items: SidebarItem[];\n  // 是否可折叠\n  collapsable?: boolean;\n  // 是否默认折叠\n  collapsed?: boolean;\n}\n\n// 可填入一个对象，也可以填入一个字符串\n// 填入字符串时，内部会转换成一个对象，字符串会被当做 link，text 值会自动取对应文档的标题\ntype SidebarItem =\n  | {\n      // 侧边栏文本\n      text: string;\n      // 侧边栏链接\n      link: string;\n    }\n  | string;\n\n\n比如:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      sidebar: {\n        '/guide/': [\n          {\n            text: 'Getting Started',\n            items: [\n              // 填入一个对象\n              {\n                text: 'Introduction',\n                link: '/guide/getting-started/introduction',\n              },\n              {\n                text: 'Installation',\n                link: '/guide/getting-started/installation',\n              },\n            ],\n          },\n          {\n            text: 'Advanced',\n            items: [\n              // 直接填入链接字符串\n              '/guide/advanced/customization',\n              '/guide/advanced/markdown',\n            ],\n          },\n        ],\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nfooter\n\n * Type: Object\n * Default: {}\n\n主页的页脚。\n\nfooter 配置是 Footer 的一个对象，它具有以下类型：\n\nexport interface Footer {\n  message?: string;\n  copyright?: string;\n}\n\n\n比如：\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      footer: {\n        message: 'This is a footer',\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\noutlineTitle\n\n * Type: string\n * Default: 'ON THIS PAGE'\n\n在右侧边栏中配置大纲的标题。\n\n比如:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      outlineTitle: 'Outline',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nprevPageText\n\n * Type: string\n * Default: Previous Page\n\n上一页的文本。比如:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      prevPageText: 'Previous Page',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nsocialLinks\n\n * Type: Array\n * Default: []\n\n你可以通过如下的配置添加相关链接，比如 github 链接、twitter 链接等。 相关链接支持三种模式：链接模式link 文本模式text\n图片模式img，相关例子如下：\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      socialLinks: [\n        {\n          icon: 'github',\n          mode: 'link',\n          content: 'https://github.com/sanyuan0704/island.js',\n        },\n        {\n          icon: 'wechat',\n          mode: 'text',\n          content: '微信号xxx',\n        },\n        {\n          icon: 'qq',\n          mode: 'img',\n          content: '/qrcode.png',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n * 当link模式时，点击 icon 即可跳转链接。\n * 当text模式时，鼠标移到 icon 上会显示弹框，弹框内容是输入的文本。\n * 当img模式时，鼠标移到 icon 上会显示弹框，弹框内容是指定的图片，需要注意的是，图片需要放在public目录下。\n\n相关链接支持以下几种图片，通过 icon 属性来选择：\n\nexport type SocialLinkIcon =\n  | 'discord'\n  | 'facebook'\n  | 'github'\n  | 'instagram'\n  | 'linkedin'\n  | 'slack'\n  | 'twitter'\n  | 'youtube'\n  | 'weixin'\n  | 'qq'\n  | 'juejin'\n  | 'zhihu'\n  | 'bilibili'\n  | 'weibo'\n  | { svg: string };\n\n\n如果需要自定义 icon，可以通过传入一个带有svg属性的对象，svg 的值为自定义图标内容即可，比如：\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      socialLinks: [\n        {\n          icon: {\n            svg: 'svg图标内容',\n          },\n          mode: 'link',\n          content: 'https://github.com/',\n        },\n      ],\n    },\n  }\n  plugins: [docTools()],·\n});\n\n\n\nnextPageText\n\n * Type: string\n * Default: Next Page\n\n下一页的文本。比如:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nextPageText: 'Next Page',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nlocales\n\n * Type: Array<LocaleConfig>\n * Default: undefined\n\n国际化配置。此配置为一个数组，数组中的每一项都是一个 LocaleConfig 对象，它具有以下类型：\n\nexport interface LocaleConfig {\n  // 语言名称\n  lang?: string;\n  // HTML 标题，优先于 `themeConfig.title`\n  title?: string;\n  // HTML 描述，优先于 `themeConfig.description`\n  description?: string;\n  // 对应语言的显示文本\n  label: string;\n  // 导航栏配置，优先于 `themeConfig.nav`\n  nav?: NavItem[];\n  // 侧边栏配置，优先于 `themeConfig.sidebar`\n  sidebar?: Sidebar;\n  // 右侧大纲标题\n  outlineTitle?: string;\n  // 上一页文本\n  prevPageText?: string;\n  // 下一页文本\n  nextPageText?: string;\n}\n\n\nLocaleConfig 中包含许多与主题配置中相同的配置项，但它的优先级会更高。","frontmatter":{}},{"id":33,"title":"内置组件","routePath":"/doc-tools/zh/guide/components","lang":"zh","toc":[],"domain":"","content":"\n\n详情可查看 内置组件 API.","frontmatter":{}},{"id":34,"title":"约定式路由","routePath":"/doc-tools/zh/guide/conventional-route","lang":"zh","toc":[{"id":"什么是约定式路由","text":"什么是约定式路由","depth":2},{"id":"映射规则","text":"映射规则","depth":2},{"id":"自定义行为","text":"自定义行为","depth":2},{"id":"最佳实践","text":"最佳实践","depth":2}],"domain":"","content":"\n\n\n什么是约定式路由\n\nModern.js Doc 使用的是文件系统路由，页面的文件路径会简单的映射为路由路径，这样会让整个项目的路由非常直观。\n\n例如，如果在 docs 目录中有一个名为 foo.md 的文件，则该文件的路由路径将是 /foo。\n\n\n映射规则\n\nModern.js Doc 会自动扫描根目录和所有子目录，并将文件路径映射到路由路径。例如，如果你有以下的文件结构：\n\ndocs\n├── foo\n│   └── bar.md\n└── foo.md\n\n\n那么 bar.md 的路由路径会是 /foo/bar，foo.md 的路由路径会是 /foo。\n\n具体映射规则如下：\n\n| 文件路径 | 路由路径 | | --------------- | ---------- | | index.md | / | | /foo.md |\n/foo | | /foo/bar.md | /foo/bar | | /zoo/index.md | /zoo |\n\n\n自定义行为\n\n如果要自定义路由行为，可以使用配置文件中的 route 字段。例如：\n\n\n\nexport default defineConfig({\n  route: {\n    // These files will be excluded from the routing (support glob pattern)\n    exclude: ['custom.tsx', 'component/**/*']\n    // These files will be included in the routing (support glob pattern)\n    include: ['other-dir/**/*'],\n  }\n});\n\n\n\n最佳实践\n\n我们推荐你将文档文件放在 docs 目录下，这样可以让你的项目更加清晰。而对于非文档内容，比如自定义组件、工具函数等，可以放到 docs\n目录之外进行维护。比如：\n\ndocs\n└── foo.mdx\nsrc\n├── components\n│   └── CustomComponent.tsx\n└── utils\n    └── utils.ts\n","frontmatter":{}},{"id":35,"title":"正文页面","routePath":"/doc-tools/zh/guide/doc-page","lang":"zh","toc":[],"domain":"","content":"\n\n🚧 建设中","frontmatter":{}},{"id":36,"title":"快速开始","routePath":"/doc-tools/zh/guide/getting-started","lang":"zh","toc":[{"id":"1-初始化项目","text":"1. 初始化项目","depth":2},{"id":"2-启动-dev-server","text":"2. 启动 Dev Server","depth":2},{"id":"3-生产环境构建","text":"3. 生产环境构建","depth":2},{"id":"4-本地预览产物","text":"4. 本地预览产物","depth":2}],"domain":"","content":"\n\n\n1. 初始化项目\n\n首先，你可以通过以下命令创建一个新目录：\n\nmkdir modern-doc-app && cd modern-doc-app\n\n\n执行 npm init -y 来初始化一个项目。你可以使用 npm、yarn 或 pnpm 安装 Modern.js Doc:\n\n<Tabs values={[{ label: 'npm' }, { label: 'yarn' }, { label: 'pnpm' }]}>\n\nnpm install @modern-js/doc-tools -D\n\n\nyarn add @modern-js/doc-tools -D\n\n\npnpm install @modern-js/doc-tools -D\n\n\n然后通过如下命令创建文件:\n\nmkdir docs && echo '# Hello World' > docs/index.md\n\n\n在package.json中加上如下的脚本:\n\n{\n  \"scripts\": {\n    \"dev\": \"modern dev\",\n    \"build\": \"modern build\",\n    \"preview\": \"modern preview\"\n  }\n}\n\n\n然后初始化一个配置文件 modern.config.ts:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    root: path.join(__dirname, 'docs'),\n  },\n  plugins: [docTools()],\n});\n\n\n\n2. 启动 Dev Server\n\n通过如下命令启动本地开发服务:\n\nnpm run dev\n\n\n这样 Modern.js Doc 将启动开发服务。\n\n\n3. 生产环境构建\n\n通过如下命令构建生产环境的产物:\n\nnpm run build\n\n\n默认情况下，Modern.js Doc 将会把产物打包到 doc_build 目录。\n\n\n4. 本地预览产物\n\n通过如下命令启动本地预览服务:\n\nnpm run preview\n\n\n这样 Modern.js Doc 将启动产物预览服务。","frontmatter":{}},{"id":37,"title":"自定义全局样式","routePath":"/doc-tools/zh/guide/global-styles","lang":"zh","toc":[{"id":"使用方法","text":"使用方法","depth":2}],"domain":"","content":"\n\n某些场景下，你可能需要在主题 UI 的基础上添加一些全局样式，框架提供了一个配置项 globalStyles 来实现这个功能。\n\n\n使用方法\n\n在 modern.config.ts 中添加以下配置：\n\n\n\n\nexport default defineConfig({\n  doc: {\n    globalStyles: [path.join(__dirname, 'styles/index.css')],\n  },\n  plugins: [docTools()],\n});\n\n\n然后可以添加以下代码：\n\n/* styles/index.css */\n:root {\n  --modern-c-brand: #f00;\n}\n\n\n这样框架会自动搜集所有的全局样式并合并到最终的样式文件中。\n\n> 如果想了解更多内部的全局样式，可以查看vars.css 以及 doc.css。","frontmatter":{}},{"id":38,"title":"Home 主页","routePath":"/doc-tools/zh/guide/home-page","lang":"zh","toc":[],"domain":"","content":"\n\n你可以通过 frontmatter 来定义 Home 页面的内容，详细类型可见FrontMatter 配置。下面是一个简单的例子：\n\n---\npageType: home\n\nhero:\n  name: Modern.js Doc\n  text: 文档工程解决方案\n  tagline: 现代化文档开发技术栈\n  actions:\n    - theme: brand\n      text: 介绍\n      link: /zh/guide/introduction\n    - theme: alt\n      text: 快速开始\n      link: /zh/guide/getting-started\n\nfeatures:\n  - title: 'MDX: 使用灵活语法编写内容'\n    details: MDX 是一种强大的内容编写方式，你可以在 Markdown 中使用 React 组件。\n    icon: 📦\n  - title: '功能丰富: 一站式解决方案'\n    details: 对全文搜索、国际化等常见功能可以做到开箱即用。\n    icon: 🎨\n  - title: '扩展性强: 提供多种自定义能力'\n    details: 通过其扩展机制，你可以轻松的扩展主题 UI 和构建能力。\n    icon: 🚀\n---\n","frontmatter":{}},{"id":39,"title":"国际化","routePath":"/doc-tools/zh/guide/i18n","lang":"zh","toc":[{"id":"配置默认语言","text":"配置默认语言","depth":2},{"id":"配置-docthemeconfiglocales","text":"配置 doc.themeConfig.locales","depth":2},{"id":"新建不同的语言版本的文档","text":"新建不同的语言版本的文档","depth":2}],"domain":"","content":"\n\n在 Modern.js Doc 中实现文档的国际化，你需要做三件事情:\n\n * 1. 配置默认语言。\n * 2. 配置 doc.themeConfig.locales。\n * 3. 新建不同的语言版本的文档。\n\n\n配置默认语言\n\n在 modern.config.ts中，你可以通过 doc.lang 配置文档的默认语言，如下例子所示:\n\n\n\nexport default defineConfig({\n  doc: {\n    lang: 'zh',\n  },\n  plugins: [docTools()],\n});\n\n\n这很重要，因为对于默认语言下的路由，框架会去掉语言前缀，比如 /zh/guide/getting-started 会被转换为\n/guide/getting-started。\n\n\n配置 doc.themeConfig.locales\n\n在 modern.config.ts中，你可以通过 doc.themeConfig.locales 配置文档的多语言版本，如下例子所示:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      // locales 为一个对象数组\n      locales: [\n        {\n          lang: 'en',\n          // 导航栏切换语言的标签\n          label: 'English',\n          title: 'Modern.js',\n          description: 'Modern.js 文档框架',\n        },\n        {\n          lang: 'zh',\n          // 导航栏切换语言的标签\n          label: '简体中文',\n          title: 'Modern.js',\n          description: 'Modern.js Doc',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n在这个例子中，我们对不同语言的文档进行了标题、描述、导航栏语言标签的配置。当然，一般情况下我们还需要进行其它信息的配置，比如 sidebar、nav\n等。下面我们以 nav 为例来看看如何配置。\n\n首先我们新建一个工具函数，用于根据语言返回不同的文本和链接:\n\n// 新增工具函数，返回 getText 和 getLink 方法\nfunction getI18nHelper(lang: 'zh' | 'en') {\n  const isZh = lang === 'zh';\n  // 我们默认语言是中文，所以这里的 prefix 为 ''，如果默认语言是英文，那么 prefix 为 '/en'\n  const prefix = isZh ? '' : '/en';\n  const getLink = (str: string) => `${prefix}${str}`;\n  const getText = (zhText: string, enText: string) => (isZh ? zhText : enText);\n  return { getText, getLink };\n}\n\n\n然后基于工具函数来组装 nav 配置:\n\nfunction getNavbar(lang: 'zh' | 'en'): NavItem[] {\n  const { getLink, getText } = getI18nHelper(lang);\n\n  return [\n    {\n      text: getText('指南', 'Guide'),\n      link: getLink('/guide/getting-started'),\n      activeMatch: '/guide/',\n    },\n    {\n      text: getText('API', 'API'),\n      link: getLink('/api/'),\n      activeMatch: '/api/',\n    },\n  ];\n}\n\n\n最后在 locales 配置中使用:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      locales: [\n        {\n          lang: 'en',\n          // 导航栏切换语言的标签\n          label: 'English',\n          title: 'Modern.js',\n          description: 'Modern.js 文档框架',\n+          nav: getNavbar('en'),\n        },\n        {\n          lang: 'zh',\n          // 导航栏切换语言的标签\n          label: '简体中文',\n          title: 'Modern.js',\n          description: 'Modern.js Doc',\n+          nav: getNavbar('zh'),\n        },\n      ]\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n对于其它的国际化参数配置，请参考API 类型。\n\n\n新建不同的语言版本的文档\n\n在做好上面的配置后，我们就可以开始新建不同语言版本的文档了，非常简单，我们只需要在文档根目录下新建如下的结构即可：\n\ndocs\n├── en\n│   ├── api\n│   │   └── index.md\n│   └── guide\n│       └── getting-started.md\n└── zh\n    ├── api\n    │   └── index.md\n    └── guide\n        └── getting-started.md\n\n\n可以看到，我们把不同语言的文档放在了 docs 目录下的 en 和 zh 目录中，这样就可以方便地区分不同语言的文档了。","frontmatter":{}},{"id":40,"title":"介绍","routePath":"/doc-tools/zh/guide/introduction","lang":"zh","toc":[{"id":"定位","text":"定位","depth":2},{"id":"功能特性","text":"功能特性","depth":2},{"id":"支持-mdx-渲染","text":"支持 MDX 渲染","depth":3},{"id":"支持全文搜索","text":"支持全文搜索","depth":3},{"id":"支持国际化i18n","text":"支持国际化(I18n)","depth":3},{"id":"代码块高亮","text":"代码块高亮","depth":3},{"id":"支持自定义主题","text":"支持自定义主题","depth":3},{"id":"支持插件机制","text":"支持插件机制","depth":3}],"domain":"","content":"\n\n\n定位\n\nModern.js Doc 是一个面向文档站场景的前端框架，它的目标是给开发者提供一个简单、高效、可扩展的文档站解决方案。\n\n该文档框架的初衷是给公司内部的技术产品提供文档站搭建的解决方案，并满足内部的一些特殊需求，如跨站点搜索服务等。而对于常见的文档站搭建需求，我们也做了比较完整的支\n持，比如支持多语言、全文搜索、自定义主题等等。\n\n同时，框架基于 Modern.js Builder 来进行项目构建，内置多种构建优化策略，提供良好的开发体验，并在不久的将来通过 Modern.js\nBuilder 接入下一代构建引擎 rspack。\n\n\n功能特性\n\n\n支持 MDX 渲染\n\nModern.js Doc 基于 MDX 来进行 Markdown 语法的扩展，支持在 Markdown 中使用 React 组件，同时支持在 Markdown\n中使用 JSX 语法，语法上更加灵活。\n\n语法详情请参考 MDX 开发 小节。\n\n\n支持全文搜索\n\n基于开源 FlexSearch 搜索引擎，提供开箱即用的文档搜索能力。\n\n\n支持国际化(I18n)\n\n内置国际化支持，支持多语言切换，且支持多语言内容搜索。\n\n\n代码块高亮\n\n基于 Shiki 来进行编译时代码着色，支持多种代码语言高亮。如:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    root: path.join(__dirname, 'docs'),\n  },\n  plugins: [docTools()],\n});\n\n\n\n支持自定义主题\n\n支持自定义主题，可以通过配置文件来进行主题的定制，详情请参考 主题定制。\n\n\n支持插件机制\n\n内部设计了插件系统，你可以通过自定义插件来扩展 Modern.js Doc 的功能，详情请参考 插件机制。","frontmatter":{}},{"id":41,"title":"导航栏模块","routePath":"/doc-tools/zh/guide/navbar","lang":"zh","toc":[{"id":"自定义导航菜单","text":"自定义导航菜单","depth":2},{"id":"navitemwithlink","text":"NavItemWithLink","depth":3},{"id":"navitemwithchildren","text":"NavItemWithChildren","depth":3},{"id":"示例","text":"示例","depth":3},{"id":"白天夜间模式","text":"白天/夜间模式","depth":2},{"id":"相关链接","text":"相关链接","depth":2}],"domain":"","content":"\n\n导航栏对一个网站来说非常重要，它可以让用户快速的在网站的不同页面之间进行跳转，也可以让用户快速的找到网站的一些重要信息。\n\n\n自定义导航菜单\n\n你可以在 themeConfig.nav 中添加自定义的导航菜单，配置为一个数组，如下：\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n导航栏配置为一个数组，数组中的每一项都是一个 NavItem 对象，它具有以下类型：\n\nexport type NavItem = NavItemWithLink | NavItemWithChildren;\n\n\n也就是说，每个导航栏元素( NavItem )可以是一个链接( NavItemWithLink )，也可以是一个包含子元素的导航栏组(\nNavItemWithChildren )。\n\n\nNavItemWithLink\n\nexport interface NavItemWithLink {\n  text: string;\n  link: string;\n  activeMatch?: string;\n}\n\n\n其中各项属性的含义如下:\n\n * text - 导航栏文本\n * link - 导航栏链接\n * activeMatch - 导航栏链接的激活规则\n\nactiveMatch 用于匹配当前路由，当路由匹配 activeMatch 规则时，nav 项会高亮显示。\n\n> 默认情况下，activeMatch 是 NavItem 的 link 属性。\n\n\nNavItemWithChildren\n\nexport interface NavItemWithChildren {\n  text: string;\n  items: (NavItemWithLink | NavItemWithChildren)[];\n}\n\n\n其中各项属性的含义如下:\n\n * text - 导航栏文本\n * items - 子导航栏元素\n\n\n示例\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [\n        {\n          text: 'Home',\n          link: '/',\n        },\n        {\n          text: '更多链接',\n          items: [\n            {\n              text: 'Github',\n              link: 'http://github.com/',\n            },\n            {\n              text: 'Twitter',\n              link: 'http://twitter.com/',\n            },\n            // 也可以是一个导航栏组\n            {\n              text: 'Group',\n              items: [\n                {\n                  text: 'Personal',\n                  link: 'http://xxx.com/',\n                },\n                {\n                  text: 'Company',\n                  link: 'http://xxx.com/',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\n白天/夜间模式\n\n默认情况下导航栏会带上 白天/夜间 模式的切换按钮，你可以通过如下的配置禁用：\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      darkMode: false,\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\n相关链接\n\n网站的社交链接。比如：\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      socialLinks: [\n        {\n          icon: 'github',\n          link: 'github.com/web-infra-dev/modern.js',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n更多配置请参考 链接。","frontmatter":{}},{"id":42,"title":"预览页","routePath":"/doc-tools/zh/guide/overview-page","lang":"zh","toc":[{"id":"效果","text":"效果","depth":2},{"id":"如何开启","text":"如何开启？","depth":2},{"id":"1-新建目录配置-frontmatter","text":"1. 新建目录，配置 frontmatter","depth":3},{"id":"2-配置-sidebar","text":"2. 配置 sidebar","depth":3}],"domain":"","content":"\n\n\n效果\n\nModern.js Doc 内置一套预览页，效果如下:\n\n\n如何开启？\n\n生成预览页需要如下两步:\n\n\n1. 新建目录，配置 frontmatter\n\n比如新建如下的目录和文件:\n\n├── docs\n│   ├── index.md\n│   ├── api\n│   │   ├── index.md\n│   │   ├── preview1.md\n│   │   └── preview2.md\n// ...\n\n\n我们在 api/index.md 中添加如下内容:\n\n---\noverview: true\n---\n\n\n\n2. 配置 sidebar\n\n配置预览页面的结构会基于 sidebar 的配置来生成，比如我们添加如下的 sidebar 配置:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      sidebar: {\n        '/api/': [\n          {\n            text: 'Group1',\n            items: [\n              // 注意: 需要提前创建好文档\n              '/api/foo',\n              '/api/bar',\n            ],\n          },\n          {\n            text: 'Group2',\n            items: ['/api/xxx', '/api/yyy'],\n          },\n        ],\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n框架会摘取所有 api 目录下的文件以及其中的 h1、h2 标题，并根据 sidebar 配置中的分组信息生成预览页。","frontmatter":{}},{"id":43,"title":"静态资源处理","routePath":"/doc-tools/zh/guide/static-assets","lang":"zh","toc":[],"domain":"","content":"\n\n你可以在 markdown（或 mdx）文件中导入静态资源。相对路径和绝对路径都是支持的，例如，如果在 markdown\n同级目录有一张图片，你可以像这样引用它：\n\n![](./demo.png)\n\n\n当然，在 .mdx 文件中你也可以直接使用 img 标签：\n\n<img src=\"./demo.png\" />\n\n\nModern.js Doc 将会根据 .mdx 文件路径和图片路径，自动找到图片并响应给浏览器。\n\n另一方面，也可以使用绝对路径导入静态资源。这样，Modern.js Doc 将会在项目根目录下的 public 文件夹中寻找资源。\n\n> 项目根目录，即 modern.config.ts 中 doc.root 字段指定的目录。\n\n\n\nexport default defineConfig({\n  doc: {\n    root: path.join(__dirname, 'docs'),\n  },\n});\n\n\n例如，如果根目录是 docs 并且目录结构如下\n\ndocs\n├── public\n│   └── demo.png\n├── index.mdx\n\n\n在如上的 index.mdx 文件中，你可以像这样引用 demo.png：\n\n![](./public/demo.png)\n\n\n或者用绝对路径来引用：\n\n![](/demo.png)\n","frontmatter":{}},{"id":44,"title":"使用 MDX","routePath":"/doc-tools/zh/guide/use-mdx","lang":"zh","toc":[{"id":"markdown","text":"Markdown","depth":2},{"id":"使用组件","text":"使用组件","depth":2},{"id":"front-matter","text":"Front Matter","depth":2},{"id":"自定义容器","text":"自定义容器","depth":2},{"id":"代码块","text":"代码块","depth":2}],"domain":"","content":"\n\nModern.js Doc 支持 MDX，这是一种功能强大的内容开发方式。\n\n\nMarkdown\n\nMDX 是 Markdown 的超集，这意味着你可以像往常一样编写 Markdown 文件。例如：\n\n# Hello World\n\n\n\n使用组件\n\n当你想在 Markdown 文件中使用 React 组件时，你应该使用 .mdx 扩展名来命名你的文件。例如：\n\n// docs/index.mdx\n\n\n# Hello World\n\n<CustomComponent />\n\n\n\nFront Matter\n\n你可以在 Markdown 文件的开头添加 Front Matter，它是一个 YAML 格式的对象，用于定义一些元数据。例如：\n\n---\ntitle: Hello World\n---\n\n\n> 注意：默认情况下，Modern.js Doc 使用 h1 标题作为 html 的标题。\n\n你还可以在正文中访问 Front Mattter 中定义的属性，例如：\n\n---\ntitle: Hello World\n---\n\n# {frontmatter.title}\n\n\n前面定义的属性将作为 frontmatter 属性传递给组件。所以最终输出将是：\n\n<h1>Hello World</h1>\n\n\n\n自定义容器\n\n你可以使用 ::: 语法来创建自定义容器，且支持自定义标题。例如：\n\n输入：\n\n:::tip\n这是一个`tip`类型的`block`\n:::\n\n:::info\n这是一个`info`类型的`block`\n:::\n\n:::warning\n这是一个`warning`类型的`block`\n:::\n\n:::danger\n这是一个`danger`类型的`block`\n:::\n\n:::tip 自定义标题\n自定义标题的 `block`\n:::\n\n:::tip{title=自定义标题}\n自定义标题的 `block`\n:::\n\n\n输出：\n\nTIP\n\n这是一个 tip 类型的 block\n\nINFO\n\n这是一个 info 类型的 block\n\nWARNING\n\n这是一个 warning 类型的 block\n\nDANGER\n\n这是一个 danger 类型的 block\n\n自定义标题\n\n自定义标题的 block\n\n自定义标题\n\n自定义标题的 block\n\n\n代码块\n\n你可以使用 ``` 语法来创建代码块，且支持自定义标题。例如：\n\n输入:\n\n```js\nconsole.log('Hello World');\n```\n\n```js title=\"hello.js\"\nconsole.log('Hello World');\n```\n\n\n输出:\n\nconsole.log('Hello World');\n\n\nconsole.log('Hello World');\n","frontmatter":{}}]